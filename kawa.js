// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Kawa, MergeStream, WaiterStream, extend,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  extend = function(obj, mixin) {
    var method, name;
    for (name in mixin) {
      method = mixin[name];
      obj[name] = method;
    }
    return obj;
  };

  Kawa = {};

  if (typeof module !== "undefined" && module !== null ? module.exports = Kawa : void 0) {

  } else {
    window.Kawa = Kawa;
  }

  EventEmitter = (function() {
    function EventEmitter() {
      this.off = __bind(this.off, this);
    }

    EventEmitter.prototype.off = function(f) {
      if (this.events == null) {
        this.events = [];
      }
      if (f) {
        if (this.events.indexOf(f) > -1) {
          return this.events.splice(this.events.indexOf(f), 1);
        }
      } else {
        return this.events.length = 0;
      }
    };

    EventEmitter.prototype.trigger = function() {
      var ev, _i, _len, _ref, _results;
      if (this.events == null) {
        this.events = [];
      }
      _ref = this.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ev = _ref[_i];
        _results.push(ev(this._val));
      }
      return _results;
    };

    EventEmitter.prototype.onChange = function(f) {
      if (this.events == null) {
        this.events = [];
      }
      return this.events.push(f);
    };

    EventEmitter.prototype.reset = function(_val) {
      this._val = _val;
      return this.trigger();
    };

    return EventEmitter;

  })();

  MergeStream = (function() {
    extend(MergeStream.prototype, EventEmitter.prototype);

    function MergeStream(initial, streams, reducer) {
      var s, _fn, _i, _len, _ref;
      this.streams = streams;
      this.reducer = reducer;
      this._val = initial;
      this._onDispose = [];
      _ref = this.streams;
      _fn = (function(_this) {
        return function(s) {
          var cb;
          cb = function() {
            var values;
            values = _this.streams.map(function(s) {
              if (s.disposed) {
                throw new Error('child disposed');
              }
              return s.value();
            });
            _this._val = _this.reducer(values, _this._val);
            return _this.trigger();
          };
          s.onChange(cb);
          return _this._onDispose.push(function() {
            return s.off(cb);
          });
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _fn(s);
      }
    }

    MergeStream.prototype.value = function() {
      return this._val;
    };

    MergeStream.prototype.dispose = function() {
      var fn, _i, _len, _ref;
      this.disposed = true;
      _ref = this._onDispose;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        fn();
      }
      delete this._onDispose;
      delete this.events;
      delete this.reducer;
      delete this._val;
      return Object.freeze(this);
    };

    return MergeStream;

  })();

  WaiterStream = (function() {
    function WaiterStream(streams, fullfilled, callback, once) {
      var s, _fn, _i, _len, _ref;
      this.streams = streams;
      this.fullfilled = fullfilled;
      this.callback = callback;
      if (once == null) {
        once = false;
      }
      this._onDispose = [];
      _ref = this.streams;
      _fn = (function(_this) {
        return function(s) {
          var cb;
          cb = function() {
            var values;
            values = _this.streams.map(function(s) {
              if (s.disposed) {
                throw new Error('child disposed');
              }
              return s.value();
            });
            if (_this.fullfilled(values)) {
              _this.callback(values);
              if (once) {
                return _this.dispose();
              }
            }
          };
          s.onChange(cb);
          return _this._onDispose.push(function() {
            return s.off(cb);
          });
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _fn(s);
      }
    }

    WaiterStream.prototype.dispose = function() {
      var f, _i, _len, _ref;
      _ref = this._onDispose;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        f();
      }
      delete this._onDispose;
      delete this.streams;
      delete this.fullfilled;
      delete this.callback;
      return Object.freeze(this);
    };

    return WaiterStream;

  })();

  Kawa.when = function(streams, fullfilled, fn) {
    return new WaiterStream(streams, fullfilled, fn);
  };

  Kawa.once = function(streams, fullfilled, fn) {
    return new WaiterStream(streams, fullfilled, fn, true);
  };

  Kawa.merge = function(initial, streams, fn) {
    return new MergeStream(initial, streams, fn);
  };

  Kawa.Stream = (function() {
    extend(Stream.prototype, EventEmitter.prototype);

    function Stream(initial, reducer) {
      this.reducer = reducer;
      this.disposed = false;
      this.events = [];
      if (this.reducer == null) {
        this.reducer = function(v) {
          return v;
        };
      }
      this._val = initial;
    }

    Stream.prototype.dispose = function() {
      this.disposed = true;
      delete this.events;
      delete this.reducer;
      delete this._val;
      return Object.freeze(this);
    };

    Stream.prototype.value = function() {
      return this._val;
    };

    Stream.prototype.addSource = function(val) {
      var next, prev;
      prev = this._val;
      next = this.reducer(val, this._val);
      this._val = next;
      if (next !== prev) {
        this.trigger();
      }
      return this._val;
    };

    return Stream;

  })();

}).call(this);
